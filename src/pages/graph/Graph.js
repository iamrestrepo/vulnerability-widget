import React from 'react';
import { Bar } from 'react-chartjs-2';
const Graph = (props) => {


  const getData = () => {
    const data = {
      labels: ['Before', 'After'],
      datasets: []
    };

    if (props.filter === 'none') {
      data.datasets.push(
        {
          label: 'Low',
          data: [props.data.before.low, props.data.after.low],
          backgroundColor: '#f7f79f'
        },
        {
          label: 'Medium',
          data: [props.data.before.medium, props.data.after.medium],
          backgroundColor: '#8bdef2'
        },
        {
          label: 'High',
          data: [props.data.before.high, props.data.after.high],
          backgroundColor: '#e88542'
        },
        {
          label: 'Critical',
          data: [props.data.before.critical, props.data.after.critical],
          backgroundColor: '#e55242'
        },

      )
    }

    if (props.filter === 'low') {
      data.datasets.push({
        label: 'Low',
        data: [props.data.before.low, props.data.after.low],
        backgroundColor: '#f7f79f'
      })
    }

    if (props.filter === 'criticalOnly') {
      data.datasets.push(
        {
          label: 'Critical',
          data: [props.data.before.critical, props.data.after.critical],
          backgroundColor: '#e55242'
        }
      )
    }

    if(props.filter === 'criticalAndHigh') {
      data.datasets.push(
        {
          label: 'High',
          data: [props.data.before.high, props.data.after.high],
          backgroundColor: '#e88542'
        },
        {
          label: 'Critical',
          data: [props.data.before.critical, props.data.after.critical],
          backgroundColor: '#e55242'
        },
      )
    }

    if (props.filter === 'criticalHighMedium' ) {
      data.datasets.push(
        {
          label: 'High',
          data: [props.data.before.high, props.data.after.high],
          backgroundColor: '#e88542'
        },
        {
          label: 'Medium',
          data: [props.data.before.medium, props.data.after.medium],
          backgroundColor: '#8bdef2'
        },
        {
          label: 'Critical',
          data: [props.data.before.critical, props.data.after.critical],
          backgroundColor: '#e55242'
        },

      )
    }
    return data;
  };

  const calculateMax = () => {
    const max = [0, 0];
    getData().datasets.forEach((set) => {
      max[0] += set.data[0];
      max[1] += set.data[1];
    });
    return ((Math.ceil(Math.max(...max) / 20) * 20) + 20);
  };

  return (
  <Bar
    data={getData}
    width={50}
    height={500}
    options={{
      maintainAspectRatio: false,
      responsive: true,
      scales: {

        xAxes: [{ stacked: true, maxBarThickness: 100, }],
        yAxes: [{ stacked: true, maxBarHeight: 500, ticks: {
            max: calculateMax(),
            stepSize: 20
          } }]
      },
      title: {
        display: true,
        text: 'Vulnerability Graph',
        fontSize: 24
      },
      tooltips: {
        title: {
          display: false
        },
        callbacks: {
          label: (tooltipItem, data) => {
            const {datasetIndex: dataIndex, index, yLabel: currentValue} = tooltipItem;
            const total = data.datasets.reduce((cur, next) => cur += next.data[index], 0);
            const percentage = ((currentValue / total) * 100).toFixed(2);
            return `# ${data.datasets[dataIndex].label}: ${currentValue} (${percentage}%)`;
          },
          title: () => {
            return '';
          }
        },
        backgroundColor: '#666666',
        titleFontColor: '#FFF',
        bodyFontColor: '#FFF',
        bodyFontSize: 10,
        displayColors: false,
        yAlign:'bottom',
        xAlign: 'center',
        height: '25px',
        percentageInnerCutout : 70
      },
      legend: {
        display: false
      }
    }}
  />
)
};


export default Graph;
